from aiogram.filters import Command, StateFilter

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext

from tg_bot.handlers.states import ChooseBudgetOption, SetIncomeExpenses, EnterBudget

budget_router = Router()


@budget_router.message(Command("budget"), StateFilter("*"))
async def cmd_budget(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /budget. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–∏–º –±—é–¥–∂–µ—Ç–æ–º.
    """
    await message.answer("""Welcome to the Personal Finance Tracker Bot.
    Choose an option:
    1. Add Income and Expenses
    2. Set Budget
    3. View Summary
    """)

    await state.set_state(ChooseBudgetOption)


@budget_router.message(ChooseBudgetOption,
                       F.text.startswith("1"))
async def choose_add_income_expenses(message: types.Message, state: FSMContext):
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤.
    """
    await message.answer("Enter the amount of income")
    await state.set_state(SetIncomeExpenses.AddIncome)


@budget_router.message(
    SetIncomeExpenses.AddIncome,
    # F.text.isdigit(),
    F.text.as_("income"),
    )
async def enter_income(message: types.Message, state: FSMContext, income: int):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –µ–≥–æ –∫ –≤–≤–æ–¥—É —Ä–∞—Å—Ö–æ–¥–æ–≤.
    """
    await state.update_data(income=int(income))
    await message.answer("Enter the amount of expenses")
    await state.set_state(SetIncomeExpenses.AddExpenses)


@budget_router.message(
    SetIncomeExpenses.AddExpenses,
    # F.text.isdigit(),
    F.text.as_("expenses"),
)
async def enter_expenses(message: types.Message, state: FSMContext, expenses: int):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö.
    """
    await state.update_data(expenses=int(expenses))
    await message.answer("Thank you for entering the data")
    await cmd_budget(message, state)


@budget_router.message(ChooseBudgetOption,
                       F.text.startswith("2"))
async def choose_set_budget(message: types.Message, state: FSMContext):
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—â–µ–≥–æ –±—é–¥–∂–µ—Ç–∞.
    """
    await message.answer("Enter the amount of budget")
    await state.set_state(EnterBudget)


@budget_router.message(
    EnterBudget,
    # F.text.isdigit(),
    F.text.as_("budget"),
    )
async def enter_budget(message: types.Message, state: FSMContext, budget: int):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É–º–º—É –æ–±—â–µ–≥–æ –±—é–¥–∂–µ—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö.
    """
    await state.update_data(budget=int(budget))
    await message.answer("Thank you for entering the budget")
    await cmd_budget(message, state)


@budget_router.message(StateFilter(SetIncomeExpenses, EnterBudget))
async def enter_income_expenses_invalid(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –≤–≤–æ–¥ (–Ω–µ —á–∏—Å–ª–æ–≤–æ–π) –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Ö–æ–¥–∞—Ö –∏ —Ä–∞—Å—Ö–æ–¥–∞—Ö.
    """
    await message.reply("Invalid input, enter a number.")


@budget_router.message(ChooseBudgetOption,
                       F.text.startswith("3"))
async def choose_view_summary(message: types.Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–≤–æ–¥–∫—É –ø–æ –µ–≥–æ –¥–æ—Ö–æ–¥–∞–º, —Ä–∞—Å—Ö–æ–¥–∞–º –∏ –æ–±—â–µ–º—É –±—é–¥–∂–µ—Ç—É.
    """
    data = await state.get_data()
    income = data.get("income")
    expenses = data.get("expenses")
    budget = data.get("budget")
    if not data:
        await message.answer("No data entered yet")
        await cmd_budget(message, state)
        return

    if not income:
        await message.answer("No income entered yet. Please, enter the amount of income.")
        await choose_add_income_expenses(message, state)
        return

    if not expenses:
        await message.answer("No expenses data entered yet. Please, enter the amount of expenses.")
        await state.set_state(SetIncomeExpenses.AddExpenses)
        return

    if not budget:
        await message.answer("No budget entered yet.")
        await choose_set_budget(message, state)
        return

    balance = income - expenses
    summary = f"""
üí∞ Income: {income}
üí∏ Expenses: {expenses}
üìä Budget: {budget}
üíº Balance: {balance}
"""

    if balance < 0:
        summary += f"üö® You are in debt by {abs(balance)}\n"
    if expenses > budget:
        summary += f"üö® You are over budget by {expenses - budget}\n"

    summary += "If you want to clear the data, enter /clear\n"
    summary += "If you want to exit, enter /exit\n"

    await message.answer(summary)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
@budget_router.message(EnterBudget)
async def not_implemented(message, state: FSMContext):
    await message.answer("Not implemented")
    await state.clear()
